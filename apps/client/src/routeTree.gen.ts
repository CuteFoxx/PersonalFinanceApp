/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardRouteRouteImport } from './routes/_dashboard/route'
import { Route as AuthLayoutRouteRouteImport } from './routes/_authLayout/route'
import { Route as DashboardIndexRouteImport } from './routes/_dashboard/index'
import { Route as DashboardPotsRouteImport } from './routes/_dashboard/pots'
import { Route as AuthLayoutSignupRouteImport } from './routes/_authLayout/signup'
import { Route as AuthLayoutLoginRouteImport } from './routes/_authLayout/login'

const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: '/_dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLayoutRouteRoute = AuthLayoutRouteRouteImport.update({
  id: '/_authLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardPotsRoute = DashboardPotsRouteImport.update({
  id: '/pots',
  path: '/pots',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const AuthLayoutSignupRoute = AuthLayoutSignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => AuthLayoutRouteRoute,
} as any)
const AuthLayoutLoginRoute = AuthLayoutLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthLayoutRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof AuthLayoutLoginRoute
  '/signup': typeof AuthLayoutSignupRoute
  '/pots': typeof DashboardPotsRoute
  '/': typeof DashboardIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof AuthLayoutLoginRoute
  '/signup': typeof AuthLayoutSignupRoute
  '/pots': typeof DashboardPotsRoute
  '/': typeof DashboardIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authLayout': typeof AuthLayoutRouteRouteWithChildren
  '/_dashboard': typeof DashboardRouteRouteWithChildren
  '/_authLayout/login': typeof AuthLayoutLoginRoute
  '/_authLayout/signup': typeof AuthLayoutSignupRoute
  '/_dashboard/pots': typeof DashboardPotsRoute
  '/_dashboard/': typeof DashboardIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/login' | '/signup' | '/pots' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/signup' | '/pots' | '/'
  id:
    | '__root__'
    | '/_authLayout'
    | '/_dashboard'
    | '/_authLayout/login'
    | '/_authLayout/signup'
    | '/_dashboard/pots'
    | '/_dashboard/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthLayoutRouteRoute: typeof AuthLayoutRouteRouteWithChildren
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_dashboard': {
      id: '/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authLayout': {
      id: '/_authLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthLayoutRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dashboard/': {
      id: '/_dashboard/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/_dashboard/pots': {
      id: '/_dashboard/pots'
      path: '/pots'
      fullPath: '/pots'
      preLoaderRoute: typeof DashboardPotsRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/_authLayout/signup': {
      id: '/_authLayout/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof AuthLayoutSignupRouteImport
      parentRoute: typeof AuthLayoutRouteRoute
    }
    '/_authLayout/login': {
      id: '/_authLayout/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLayoutLoginRouteImport
      parentRoute: typeof AuthLayoutRouteRoute
    }
  }
}

interface AuthLayoutRouteRouteChildren {
  AuthLayoutLoginRoute: typeof AuthLayoutLoginRoute
  AuthLayoutSignupRoute: typeof AuthLayoutSignupRoute
}

const AuthLayoutRouteRouteChildren: AuthLayoutRouteRouteChildren = {
  AuthLayoutLoginRoute: AuthLayoutLoginRoute,
  AuthLayoutSignupRoute: AuthLayoutSignupRoute,
}

const AuthLayoutRouteRouteWithChildren = AuthLayoutRouteRoute._addFileChildren(
  AuthLayoutRouteRouteChildren,
)

interface DashboardRouteRouteChildren {
  DashboardPotsRoute: typeof DashboardPotsRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardPotsRoute: DashboardPotsRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthLayoutRouteRoute: AuthLayoutRouteRouteWithChildren,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
